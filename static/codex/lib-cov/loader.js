/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['loader.js']) {
  _$jscoverage['loader.js'] = [];
  _$jscoverage['loader.js'][11] = 0;
  _$jscoverage['loader.js'][13] = 0;
  _$jscoverage['loader.js'][14] = 0;
  _$jscoverage['loader.js'][15] = 0;
  _$jscoverage['loader.js'][16] = 0;
  _$jscoverage['loader.js'][19] = 0;
  _$jscoverage['loader.js'][22] = 0;
  _$jscoverage['loader.js'][28] = 0;
  _$jscoverage['loader.js'][29] = 0;
  _$jscoverage['loader.js'][31] = 0;
  _$jscoverage['loader.js'][32] = 0;
  _$jscoverage['loader.js'][33] = 0;
  _$jscoverage['loader.js'][37] = 0;
  _$jscoverage['loader.js'][49] = 0;
  _$jscoverage['loader.js'][50] = 0;
  _$jscoverage['loader.js'][52] = 0;
  _$jscoverage['loader.js'][53] = 0;
  _$jscoverage['loader.js'][54] = 0;
  _$jscoverage['loader.js'][56] = 0;
  _$jscoverage['loader.js'][57] = 0;
  _$jscoverage['loader.js'][61] = 0;
  _$jscoverage['loader.js'][62] = 0;
  _$jscoverage['loader.js'][63] = 0;
  _$jscoverage['loader.js'][64] = 0;
  _$jscoverage['loader.js'][76] = 0;
  _$jscoverage['loader.js'][77] = 0;
  _$jscoverage['loader.js'][79] = 0;
  _$jscoverage['loader.js'][86] = 0;
  _$jscoverage['loader.js'][111] = 0;
  _$jscoverage['loader.js'][112] = 0;
  _$jscoverage['loader.js'][113] = 0;
  _$jscoverage['loader.js'][116] = 0;
  _$jscoverage['loader.js'][118] = 0;
  _$jscoverage['loader.js'][122] = 0;
  _$jscoverage['loader.js'][134] = 0;
  _$jscoverage['loader.js'][136] = 0;
  _$jscoverage['loader.js'][144] = 0;
  _$jscoverage['loader.js'][145] = 0;
  _$jscoverage['loader.js'][157] = 0;
  _$jscoverage['loader.js'][158] = 0;
  _$jscoverage['loader.js'][161] = 0;
  _$jscoverage['loader.js'][162] = 0;
  _$jscoverage['loader.js'][164] = 0;
  _$jscoverage['loader.js'][165] = 0;
  _$jscoverage['loader.js'][167] = 0;
  _$jscoverage['loader.js'][168] = 0;
  _$jscoverage['loader.js'][173] = 0;
  _$jscoverage['loader.js'][174] = 0;
  _$jscoverage['loader.js'][177] = 0;
  _$jscoverage['loader.js'][178] = 0;
  _$jscoverage['loader.js'][180] = 0;
  _$jscoverage['loader.js'][181] = 0;
  _$jscoverage['loader.js'][182] = 0;
  _$jscoverage['loader.js'][183] = 0;
  _$jscoverage['loader.js'][184] = 0;
  _$jscoverage['loader.js'][187] = 0;
  _$jscoverage['loader.js'][189] = 0;
  _$jscoverage['loader.js'][192] = 0;
  _$jscoverage['loader.js'][193] = 0;
  _$jscoverage['loader.js'][198] = 0;
  _$jscoverage['loader.js'][199] = 0;
  _$jscoverage['loader.js'][202] = 0;
  _$jscoverage['loader.js'][205] = 0;
  _$jscoverage['loader.js'][208] = 0;
  _$jscoverage['loader.js'][209] = 0;
  _$jscoverage['loader.js'][227] = 0;
  _$jscoverage['loader.js'][228] = 0;
  _$jscoverage['loader.js'][230] = 0;
  _$jscoverage['loader.js'][234] = 0;
  _$jscoverage['loader.js'][237] = 0;
  _$jscoverage['loader.js'][239] = 0;
  _$jscoverage['loader.js'][240] = 0;
  _$jscoverage['loader.js'][241] = 0;
  _$jscoverage['loader.js'][247] = 0;
  _$jscoverage['loader.js'][250] = 0;
  _$jscoverage['loader.js'][254] = 0;
  _$jscoverage['loader.js'][265] = 0;
  _$jscoverage['loader.js'][266] = 0;
  _$jscoverage['loader.js'][268] = 0;
  _$jscoverage['loader.js'][269] = 0;
  _$jscoverage['loader.js'][272] = 0;
  _$jscoverage['loader.js'][273] = 0;
  _$jscoverage['loader.js'][274] = 0;
  _$jscoverage['loader.js'][275] = 0;
  _$jscoverage['loader.js'][279] = 0;
  _$jscoverage['loader.js'][281] = 0;
  _$jscoverage['loader.js'][282] = 0;
  _$jscoverage['loader.js'][283] = 0;
  _$jscoverage['loader.js'][289] = 0;
  _$jscoverage['loader.js'][295] = 0;
  _$jscoverage['loader.js'][313] = 0;
  _$jscoverage['loader.js'][338] = 0;
  _$jscoverage['loader.js'][340] = 0;
  _$jscoverage['loader.js'][341] = 0;
  _$jscoverage['loader.js'][342] = 0;
  _$jscoverage['loader.js'][346] = 0;
}
_$jscoverage['loader.js'][11]++;
module.exports = (function (doc) {
  _$jscoverage['loader.js'][13]++;
  var env;
  _$jscoverage['loader.js'][14]++;
  var head;
  _$jscoverage['loader.js'][15]++;
  var pending = {};
  _$jscoverage['loader.js'][16]++;
  var pollCount = 0;
  _$jscoverage['loader.js'][19]++;
  var queue = {css: [], js: []};
  _$jscoverage['loader.js'][22]++;
  var styleSheets = doc.styleSheets;
  _$jscoverage['loader.js'][28]++;
  function createNode(name, attrs) {
    _$jscoverage['loader.js'][29]++;
    var node = doc.createElement(name), attr;
    _$jscoverage['loader.js'][31]++;
    for (attr in attrs) {
      _$jscoverage['loader.js'][32]++;
      if (attrs.hasOwnProperty(attr)) {
        _$jscoverage['loader.js'][33]++;
        node.setAttribute(attr, attrs[attr]);
      }
}
    _$jscoverage['loader.js'][37]++;
    return node;
}
  _$jscoverage['loader.js'][49]++;
  function finish(type) {
    _$jscoverage['loader.js'][50]++;
    var p = pending[type], callback, urls;
    _$jscoverage['loader.js'][52]++;
    if (p) {
      _$jscoverage['loader.js'][53]++;
      callback = p.callback;
      _$jscoverage['loader.js'][54]++;
      urls = p.urls;
      _$jscoverage['loader.js'][56]++;
      urls.shift();
      _$jscoverage['loader.js'][57]++;
      pollCount = 0;
      _$jscoverage['loader.js'][61]++;
      if (! urls.length) {
        _$jscoverage['loader.js'][62]++;
        callback && callback.call(p.context, p.obj);
        _$jscoverage['loader.js'][63]++;
        pending[type] = null;
        _$jscoverage['loader.js'][64]++;
        queue[type].length && load(type);
      }
    }
}
  _$jscoverage['loader.js'][76]++;
  function getEnv() {
    _$jscoverage['loader.js'][77]++;
    var ua = navigator.userAgent;
    _$jscoverage['loader.js'][79]++;
    env = {async: doc.createElement("script").async === true};
    _$jscoverage['loader.js'][86]++;
    (env.webkit = /AppleWebKit\//.test(ua)) || (env.ie = /MSIE/.test(ua)) || (env.opera = /Opera/.test(ua)) || (env.gecko = /Gecko\//.test(ua)) || (env.unknown = true);
}
  _$jscoverage['loader.js'][111]++;
  function load(type, urls, callback, obj, context) {
    _$jscoverage['loader.js'][112]++;
    var _finish = (function () {
  _$jscoverage['loader.js'][113]++;
  finish(type);
}), isCSS = type === "css", nodes = [], i, len, node, p, pendingUrls, url;
    _$jscoverage['loader.js'][116]++;
    env || getEnv();
    _$jscoverage['loader.js'][118]++;
    if (urls) {
      _$jscoverage['loader.js'][122]++;
      urls = typeof urls === "string"? [urls]: urls.concat();
      _$jscoverage['loader.js'][134]++;
      if (isCSS || env.async || env.gecko || env.opera) {
        _$jscoverage['loader.js'][136]++;
        queue[type].push({urls: urls, callback: callback, obj: obj, context: context});
      }
      else {
        _$jscoverage['loader.js'][144]++;
        for (i = 0, len = urls.length; i < len; ++i) {
          _$jscoverage['loader.js'][145]++;
          queue[type].push({urls: [urls[i]], callback: i === len - 1? callback: null, obj: obj, context: context});
}
      }
    }
    _$jscoverage['loader.js'][157]++;
    if (pending[type] || ! (p = pending[type] = queue[type].shift())) {
      _$jscoverage['loader.js'][158]++;
      return;
    }
    _$jscoverage['loader.js'][161]++;
    head || (head = doc.head || doc.getElementsByTagName("head")[0]);
    _$jscoverage['loader.js'][162]++;
    pendingUrls = p.urls;
    _$jscoverage['loader.js'][164]++;
    for (i = 0, len = pendingUrls.length; i < len; ++i) {
      _$jscoverage['loader.js'][165]++;
      url = pendingUrls[i];
      _$jscoverage['loader.js'][167]++;
      if (isCSS) {
        _$jscoverage['loader.js'][168]++;
        node = env.gecko? createNode("style"): createNode("link", {href: url, rel: "stylesheet"});
      }
      else {
        _$jscoverage['loader.js'][173]++;
        node = createNode("script", {src: url});
        _$jscoverage['loader.js'][174]++;
        node.async = false;
      }
      _$jscoverage['loader.js'][177]++;
      node.className = "lazyload";
      _$jscoverage['loader.js'][178]++;
      node.setAttribute("charset", "utf-8");
      _$jscoverage['loader.js'][180]++;
      if (env.ie && ! isCSS) {
        _$jscoverage['loader.js'][181]++;
        node.onreadystatechange = (function () {
  _$jscoverage['loader.js'][182]++;
  if (/loaded|complete/.test(node.readyState)) {
    _$jscoverage['loader.js'][183]++;
    node.onreadystatechange = null;
    _$jscoverage['loader.js'][184]++;
    _finish();
  }
});
      }
      else {
        _$jscoverage['loader.js'][187]++;
        if (isCSS && (env.gecko || env.webkit)) {
          _$jscoverage['loader.js'][189]++;
          if (env.webkit) {
            _$jscoverage['loader.js'][192]++;
            p.urls[i] = node.href;
            _$jscoverage['loader.js'][193]++;
            pollWebKit();
          }
          else {
            _$jscoverage['loader.js'][198]++;
            node.innerHTML = "@import \"" + url + "\";";
            _$jscoverage['loader.js'][199]++;
            pollGecko(node);
          }
        }
        else {
          _$jscoverage['loader.js'][202]++;
          node.onload = node.onerror = _finish;
        }
      }
      _$jscoverage['loader.js'][205]++;
      nodes.push(node);
}
    _$jscoverage['loader.js'][208]++;
    for (i = 0, len = nodes.length; i < len; ++i) {
      _$jscoverage['loader.js'][209]++;
      head.appendChild(nodes[i]);
}
}
  _$jscoverage['loader.js'][227]++;
  function pollGecko(node) {
    _$jscoverage['loader.js'][228]++;
    var hasRules;
    _$jscoverage['loader.js'][230]++;
    try {
      _$jscoverage['loader.js'][234]++;
      hasRules = ! ! node.sheet.cssRules;
    }
    catch (ex) {
      _$jscoverage['loader.js'][237]++;
      pollCount += 1;
      _$jscoverage['loader.js'][239]++;
      if (pollCount < 200) {
        _$jscoverage['loader.js'][240]++;
        setTimeout((function () {
  _$jscoverage['loader.js'][241]++;
  pollGecko(node);
}), 50);
      }
      else {
        _$jscoverage['loader.js'][247]++;
        hasRules && finish("css");
      }
      _$jscoverage['loader.js'][250]++;
      return;
    }
    _$jscoverage['loader.js'][254]++;
    finish("css");
}
  _$jscoverage['loader.js'][265]++;
  function pollWebKit() {
    _$jscoverage['loader.js'][266]++;
    var css = pending.css, i;
    _$jscoverage['loader.js'][268]++;
    if (css) {
      _$jscoverage['loader.js'][269]++;
      i = styleSheets.length;
      _$jscoverage['loader.js'][272]++;
      while (--i >= 0) {
        _$jscoverage['loader.js'][273]++;
        if (styleSheets[i].href === css.urls[0]) {
          _$jscoverage['loader.js'][274]++;
          finish("css");
          _$jscoverage['loader.js'][275]++;
          break;
        }
}
      _$jscoverage['loader.js'][279]++;
      pollCount += 1;
      _$jscoverage['loader.js'][281]++;
      if (css) {
        _$jscoverage['loader.js'][282]++;
        if (pollCount < 200) {
          _$jscoverage['loader.js'][283]++;
          setTimeout(pollWebKit, 50);
        }
        else {
          _$jscoverage['loader.js'][289]++;
          finish("css");
        }
      }
    }
}
  _$jscoverage['loader.js'][295]++;
  return ({css: (function (urls, callback, obj, context) {
  _$jscoverage['loader.js'][313]++;
  load("css", urls, callback, obj, context);
}), js: (function (_urls, callback, obj, context) {
  _$jscoverage['loader.js'][338]++;
  var urls = [];
  _$jscoverage['loader.js'][340]++;
  for (name in _urls) {
    _$jscoverage['loader.js'][341]++;
    if (typeof window[name] === "undefined") {
      _$jscoverage['loader.js'][342]++;
      urls.push(_urls[name]);
    }
}
  _$jscoverage['loader.js'][346]++;
  load("js", urls, callback, obj, context);
})});
});
_$jscoverage['loader.js'].source = ["/**"," * UD Loader"," *"," * JavaScript, CSS and PHP library loader."," *"," * @version 0.0.3"," * @author potanin@UD"," * @namespace Loader"," * @class Loader"," */","module.exports = ( function ( doc ) {","","  var env;","  var head;","  var pending = {};","  var pollCount = 0;","","  // Queued requests.","  var queue = {css: [], js: []};","","  // Reference to the browser's list of stylesheets.","  var styleSheets = doc.styleSheets;","","  /**","   * Creates and returns an HTML element with the specified name and attributes.","   *","   */","  function createNode ( name, attrs ) {","    var node = doc.createElement( name ), attr;","","    for ( attr in attrs ) {","      if ( attrs.hasOwnProperty( attr ) ) {","        node.setAttribute( attr, attrs[attr] );","      }","    }","","    return node;","  }","","  /**","   Called when the current pending resource of the specified type has finished","   loading. Executes the associated callback (if any) and loads the next","   resource in the queue.","","   @method finish","   @param {String} type resource type ('css' or 'js')","   @private","   */","  function finish ( type ) {","    var p = pending[type], callback, urls;","","    if ( p ) {","      callback = p.callback;","      urls = p.urls;","","      urls.shift();","      pollCount = 0;","","      // If this is the last of the pending URLs, execute the callback and","      // start the next request in the queue (if any).","      if ( !urls.length ) {","        callback &amp;&amp; callback.call( p.context, p.obj );","        pending[type] = null;","        queue[type].length &amp;&amp; load( type );","      }","    }","  }","","  /**","   Populates the &lt;code&gt;env&lt;/code&gt; variable with user agent and feature test","   information.","","   @method getEnv","   @private","   */","  function getEnv () {","    var ua = navigator.userAgent;","","    env = {","      // True if this browser supports disabling async mode on dynamically","      // created script nodes. See","      // http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order","      async: doc.createElement( 'script' ).async === true","    };","","    (env.webkit = /AppleWebKit\\//.test( ua )) || (env.ie = /MSIE/.test( ua )) || (env.opera = /Opera/.test( ua )) || (env.gecko = /Gecko\\//.test( ua )) || (env.unknown = true);","  }","","  /**","   Loads the specified resources, or the next resource of the specified type","   in the queue if no resources are specified. If a resource of the specified","   type is already being loaded, the new request will be queued until the","   first request has been finished.","","   When an array of resource URLs is specified, those URLs will be loaded in","   parallel if it is possible to do so while preserving execution order. All","   browsers support parallel loading of CSS, but only Firefox and Opera","   support parallel loading of scripts. In other browsers, scripts will be","   queued and loaded one at a time to ensure correct execution order.","","   @method load","   @param {String} type resource type ('css' or 'js')","   @param {String|Array} urls (optional) URL or array of URLs to load","   @param {Function} callback (optional) callback function to execute when the","   resource is loaded","   @param {Object} obj (optional) object to pass to the callback function","   @param {Object} context (optional) if provided, the callback function will","   be executed in this object's context","   @private","   */","  function load ( type, urls, callback, obj, context ) {","    var _finish = function () {","        finish( type );","      }, isCSS = type === 'css', nodes = [], i, len, node, p, pendingUrls, url;","","    env || getEnv();","","    if ( urls ) {","      // If urls is a string, wrap it in an array. Otherwise assume it's an","      // array and create a copy of it so modifications won't be made to the","      // original.","      urls = typeof urls === 'string' ? [urls] : urls.concat();","","      // Create a request object for each URL. If multiple URLs are specified,","      // the callback will only be executed after all URLs have been loaded.","      //","      // Sadly, Firefox and Opera are the only browsers capable of loading","      // scripts in parallel while preserving execution order. In all other","      // browsers, scripts must be loaded sequentially.","      //","      // All browsers respect CSS specificity based on the order of the link","      // elements in the DOM, regardless of the order in which the stylesheets","      // are actually downloaded.","      if ( isCSS || env.async || env.gecko || env.opera ) {","        // Load in parallel.","        queue[type].push( {","          urls: urls,","          callback: callback,","          obj: obj,","          context: context","        } );","      } else {","        // Load sequentially.","        for ( i = 0, len = urls.length; i &lt; len; ++i ) {","          queue[type].push( {","            urls: [urls[i]],","            callback: i === len - 1 ? callback : null, // callback is only added to the last URL","            obj: obj,","            context: context","          } );","        }","      }","    }","","    // If a previous load request of this type is currently in progress, we'll","    // wait our turn. Otherwise, grab the next item in the queue.","    if ( pending[type] || !(p = pending[type] = queue[type].shift()) ) {","      return;","    }","","    head || (head = doc.head || doc.getElementsByTagName( 'head' )[0]);","    pendingUrls = p.urls;","","    for ( i = 0, len = pendingUrls.length; i &lt; len; ++i ) {","      url = pendingUrls[i];","","      if ( isCSS ) {","        node = env.gecko ? createNode( 'style' ) : createNode( 'link', {","          href: url,","          rel: 'stylesheet'","        } );","      } else {","        node = createNode( 'script', {src: url} );","        node.async = false;","      }","","      node.className = 'lazyload';","      node.setAttribute( 'charset', 'utf-8' );","","      if ( env.ie &amp;&amp; !isCSS ) {","        node.onreadystatechange = function () {","          if ( /loaded|complete/.test( node.readyState ) ) {","            node.onreadystatechange = null;","            _finish();","          }","        };","      } else if ( isCSS &amp;&amp; (env.gecko || env.webkit) ) {","        // Gecko and WebKit don't support the onload event on link nodes.","        if ( env.webkit ) {","          // In WebKit, we can poll for changes to document.styleSheets to","          // figure out when stylesheets have loaded.","          p.urls[i] = node.href; // resolve relative URLs (or polling won't work)","          pollWebKit();","        } else {","          // In Gecko, we can import the requested URL into a &lt;style&gt; node and","          // poll for the existence of node.sheet.cssRules. Props to Zach","          // Leatherman for calling my attention to this technique.","          node.innerHTML = '@import \"' + url + '\";';","          pollGecko( node );","        }","      } else {","        node.onload = node.onerror = _finish;","      }","","      nodes.push( node );","    }","","    for ( i = 0, len = nodes.length; i &lt; len; ++i ) {","      head.appendChild( nodes[i] );","    }","  }","","  /**","   Begins polling to determine when the specified stylesheet has finished loading","   in Gecko. Polling stops when all pending stylesheets have loaded or after 10","   seconds (to prevent stalls).","","   Thanks to Zach Leatherman for calling my attention to the @import-based","   cross-domain technique used here, and to Oleg Slobodskoi for an earlier","   same-domain implementation. See Zach's blog for more details:","   http://www.zachleat.com/web/2010/07/29/load-css-dynamically/","","   @method pollGecko","   @param {HTMLElement} node Style node to poll.","   @private","   */","  function pollGecko ( node ) {","    var hasRules;","","    try {","      // We don't really need to store this value or ever refer to it again, but","      // if we don't store it, Closure Compiler assumes the code is useless and","      // removes it.","      hasRules = !!node.sheet.cssRules;","    } catch ( ex ) {","      // An exception means the stylesheet is still loading.","      pollCount += 1;","","      if ( pollCount &lt; 200 ) {","        setTimeout( function () {","          pollGecko( node );","        }, 50 );","      } else {","        // We've been polling for 10 seconds and nothing's happened. Stop","        // polling and finish the pending requests to avoid blocking further","        // requests.","        hasRules &amp;&amp; finish( 'css' );","      }","","      return;","    }","","    // If we get here, the stylesheet has loaded.","    finish( 'css' );","  }","","  /**","   Begins polling to determine when pending stylesheets have finished loading","   in WebKit. Polling stops when all pending stylesheets have loaded or after 10","   seconds (to prevent stalls).","","   @method pollWebKit","   @private","   */","  function pollWebKit () {","    var css = pending.css, i;","","    if ( css ) {","      i = styleSheets.length;","","      // Look for a stylesheet matching the pending URL.","      while ( --i &gt;= 0 ) {","        if ( styleSheets[i].href === css.urls[0] ) {","          finish( 'css' );","          break;","        }","      }","","      pollCount += 1;","","      if ( css ) {","        if ( pollCount &lt; 200 ) {","          setTimeout( pollWebKit, 50 );","        } else {","          // We've been polling for 10 seconds and nothing's happened, which may","          // indicate that the stylesheet has been removed from the document","          // before it had a chance to load. Stop polling and finish the pending","          // request to prevent blocking further requests.","          finish( 'css' );","        }","      }","    }","  }","","  return {","","    /**","     Requests the specified CSS URL or URLs and executes the specified","     callback (if any) when they have finished loading. If an array of URLs is","     specified, the stylesheets will be loaded in parallel and the callback","     will be executed after all stylesheets have finished loading.","","     @method css","     @param {String|Array} urls CSS URL or array of CSS URLs to load","     @param {Function} callback (optional) callback function to execute when","     the specified stylesheets are loaded","     @param {Object} obj (optional) object to pass to the callback function","     @param {Object} context (optional) if provided, the callback function","     will be executed in this object's context","     @static","     */","    css: function ( urls, callback, obj, context ) {","      load( 'css', urls, callback, obj, context );","    },","","    /**","     Requests the specified JavaScript URL or URLs and executes the specified","     callback (if any) when they have finished loading. If an array of URLs is","     specified and the browser supports it, the scripts will be loaded in","     parallel and the callback will be executed after all scripts have","     finished loading.","","     Currently, only Firefox and Opera support parallel loading of scripts while","     preserving execution order. In other browsers, scripts will be","     queued and loaded one at a time to ensure correct execution order.","","     @method js","     @param {String|Array} urls JS URL or array of JS URLs to load","     @param {Function} callback (optional) callback function to execute when","     the specified scripts are loaded","     @param {Object} obj (optional) object to pass to the callback function","     @param {Object} context (optional) if provided, the callback function","     will be executed in this object's context","     @static","     */","    js: function ( _urls, callback, obj, context ) {","","      var urls = [];","","      for ( name in _urls ) {","        if ( typeof window[ name ] === 'undefined' ) {","          urls.push( _urls[ name ] );","        }","      }","","      load( 'js', urls, callback, obj, context );","    }","","  };","","});"];
